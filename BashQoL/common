#!/bin/bash

#
# MIT License
#
# Copyright (c) 2022 Reiikz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

#######################################################################
######			---------------------------------------------         #
######							ATENTION                              #
######			---------------------------------------------         #
######		THIS IS JUST A LIBRARY CONTAINGING FUNCTIONS AND SHOULD   #
######      NOT BE RAN MANUALLY 									  #
######																  #
#######################################################################

# SOURCE_URL="https://github.com/Reiikz/your-awesm"
# ERROR_REPORTING_TO="https://github.com/Reiikz/your-awesm/issues"

# provides general purpose functionality

BASH_QOL_COMMON_VERSION="0.0.1"

if [ -z "${BASH_QOL_LIBRARIES[@]}" ]; then
    declare -gA BASH_QOL_LIBRARIES=( [common]="$BASH_QOL_COMMON_VERSION" )
else
    BASH_QOL_LIBRARIES[common]="$BASH_QOL_COMMON_VERSION"
fi

################# LIBRARY

#FORMATTING CODES
FC_RESET="\e[0m"
FC_BOLD="\e[1m"

#FORMATTING
FC_DEFAULT_COLOR="\e[39m"
FC_BLACK="\e[30m"
FC_RED="\e[31m"
FC_GREEN="\e[32m"
FC_YELLOW="\e[33m"
FC_BLUE="\e[34m"
FC_MAGENTA="\e[35m"
FC_CYAN="\e[36m"
FC_LIGHT_GRAY="\e[37m"
FC_DARK_GRAY="\e[90m"
FC_LIGHT_RED="\e[91m"
FC_LIGHT_GREEN="\e[92m"
FC_LIGHT_YELLOW="\e[93m"
FC_LIGHT_BLUE="\e[94m"
FC_LIGHT_MAGENTA="\e[95m"
FC_LIGHT_CYAN="\e[96m"
FC_WHITE="\e[97m"

############## find the rest of the library

declare -gA BASH_QOL_FILES
function findAllOfTheQoLLibrary {
	local path=""
	[ $# -eq 0 ] && path="$(realpath ${BASH_SOURCE[0]})" || path="$1"
	for x in "$(dirname $path)"/*; do
		if [ -d "$x" ]; then
			findAllOfTheQoLLibrary "$(realpath -P $x)"
		fi
		if [ -x "$x" ]; then
			BASH_QOL_FILES[$(basename "$x")]="$(realpath -P $x)"
		fi
	done
}
findAllOfTheQoLLibrary

declare -gA QoL_ERRORS
QoL_ERRORS[upper_error_limit]="100"

############## QoL Library errors!
function registerQoLCommonExceptions {
	local s="$FC_BOLD$FC_LIGHT_RED""QoL Error: $FC_RED"
	registerQoLException "qol_undefined" "$s""undefined variable $FC_LIGHT_CYAN%subject%"
	registerQoLException "qol_called_internal_ex" "$s""A program tried to call an internal library exception"
	registerQoLException "qol_duplicate_ex" "$s""Duplicate exception $FC_LIGHT_CYAN%subject%"
	registerQoLException "qol_tried_registering_internal_ex" "$s""A program tried registering an internal library exception"
	registerQoLException "qol_unknown_data_validator" "$s""Tried to register option $FC_LIGHT_CYAN(%subject%)$FC_RED with unknown validator"
	registerQoLException "qol_duplicate_validator" "$s""$FC_LIGHT_CYAN%subject%$FC_RED already exists"
	registerQoLException "qol_ambigous_command" "$s""Can not specify multiple commands (%subject%)"
	registerQoLException "qol_code_request_unknown_option" "$s""(%subject%)$FC_RED is an unknown option"
	registerQoLException "qol_failed_to_parse" "$s""Option Could not be parsed"
	registerQoLException "qol_req_array_to_single" "$s""Requested array out of a single value option"
}

function registerCommonExceptions {
	local s="$FC_BOLD"
	registerException "undefined" "$s$FC_LIGHT_CYAN%subject%$FC_RED is undefined"
	registerException "nan"	"$s$FC_LIGHT_CYAN""%subject%$FC_RED is not a number"
	registerException "invalid_option" "$s""$FC_LIGHT_CYAN""%subject%$FC_RED is not a valid option"
	registerException "array_overflow" "$s""$FC_LIGHT_CYAN""%subject%$FC_RED out of index"
	registerException "array_underflow" "$s""$FC_LIGHT_CYAN""%subject%$FC_RED out of index"
}

############## Option parsing

declare -gA INTERNAL_OPTION_ALIAS
declare -gA INTERNAL_OPTIONS
declare -gA INTERNAL_COMMANDS
declare -g -- CURRENT_INTERNAL_COMMAND
declare -g -- INTERNAL_OPTION_CONTEXT
declare -g -- CRASH_ON_INVALID_OPTION="yes"
declare -gA INTERNAL_OPTION_DATA_TYPES=(["string"]="stringValidator" ["none"]="nonArgParameter" ["subcommand"]="subCommandValidator")

# DATA_TYPE HANDLER
function registerInternalOptionValidator {
	if isInArray INTERNAL_OPTION_DATA_TYPES "$1"; then
		throwEx "qol_duplicate_validator" "$1"
	fi
	INTERNAL_OPTION_DATA_TYPES[$1]="$2"
}

function evalParams {
	# echo $@
	while [ $# -gt 0 ]; do
		if isInternalCommand "$1"; then
			if [ ! -z "$CURRENT_INTERNAL_COMMAND" ]; then
				throwEx qol_ambigous_command "$1 $CURRENT_INTERNAL_COMMAND"
			fi

			CURRENT_INTERNAL_COMMAND="$1"
			shift
			continue
		fi
		
		local opt="$(getOptionID "$1")"
		# echo "parsing opt: $1"
		if [ -z "$opt" ]; then
			if readbool $CRASH_ON_INVALID_OPTION; then
				throwEx "invalid_option" "$1"
			else
				coecho "$FC_BOLD" "$FC_LIGHT_CYAN""$1$FC_YELLOW is not a valid option"
			fi
		else
			shift
			collectOptionParams $opt $@
			for x in $(seq 1 $VALIDATOR_SKIP); do
				shift
			done
			setOption $opt $OPTION_PARAMS
			unset OPTION_PARAMS
			
			unset opt
			unset VALIDATOR_SKIP
		fi

	done

	runInternalCommand
}

function collectOptionParams {
	local conext=""
	if [ ! -z "$INTERNAL_OPTION_CONTEXT" ]; then
		context="$INTERNAL_OPTION_CONTEXT~"
	fi
	local opt="$1"
	local optParser="${INTERNAL_OPTIONS[$context$opt~parser]}"
	shift
	local params=""

	declare -g -- VALIDATOR_SKIP="0"

	case $optParser in
		
		subCommandValidator)
			VALIDATOR_SKIP=$#
			declare -g -- ARGUMENT_PASSTHROUGH="$@"
		;;

		nonArgParameter)
			params=yes
		;;

		*)
			while [ $# -gt 0 ]; do

				if [ $VALIDATOR_SKIP -ge 1 ]; then

					if inputOptionExists "$1"; then
						break
					fi

					if isInternalCommand "$1"; then
						break
					fi

					if strStartsWith "$1" "-"; then
						break
					fi
				fi

				params="$([ -z "$params" ] && echo "$1" || echo "$params $1")"

				shift

				VALIDATOR_SKIP=$(($VALIDATOR_SKIP+1))
			done
		;;

	esac

	declare -g -- OPTION_PARAMS="$params"
	# echo $opt : $OPTION_PARAMS
}

function nonArgParameter {
	# echo $@
	shift
	declare -g -- OPTION_DATA="$1"
	# if [ ! -z "$OPTION_DATA" ]; then
	# 	return 0
	# else
	# 	declare -g -- OPTION_DATA="yes"
	# fi
}

function stringValidator {
	shift
	declare -g -- OPTION_DATA="$@"
}

function subCommandValidator {
	local commandName="$1"
	shift
	declare -g -- OPTION_DATA="$@"
	if [ -z "$CURRENT_INTERNAL_COMMAND" ]; then
		declare -g -- CURRENT_INTERNAL_COMMAND="$commandName"
	fi
}

function runInternalCommand {
	local command="$CURRENT_INTERNAL_COMMAND $ARGUMENT_PASSTHROUGH"
	unset CURRENT_INTERNAL_COMMAND
	unset ARGUMENT_PASSTHROUGH
	eval "$command"
}

function registerInternalCommand {
	local conext=""
	if [ ! -z "$INTERNAL_OPTION_CONTEXT" ]; then
		context="$INTERNAL_OPTION_CONTEXT~"
	fi
	if ! isInArray INTERNAL_COMMANDS "$conext$1"; then
		INTERNAL_COMMANDS[$conext$1]="$2"
	fi
}

function isInternalCommand {
	local conext=""
	if [ ! -z "$INTERNAL_OPTION_CONTEXT" ]; then
		context="$INTERNAL_OPTION_CONTEXT~"
	fi
	if [ -z "${INTERNAL_COMMANDS[$conext$1]}" ]; then
		return 1;
	fi
	return 0
}

function setOption {
	local conext=""
	if [ ! -z "$INTERNAL_OPTION_CONTEXT" ]; then
		context="$INTERNAL_OPTION_CONTEXT~"
	fi

	if ! isValidOption "$1"; then
		throwEx qol_code_request_unknown_option "$1"
	fi
	local opt="$1"

	shift

	${INTERNAL_OPTIONS[$context$opt~parser]} $opt $@

	if [ $? -gt 0 ]; then
		throwEx "qol_failed_to_parse"
	fi

	if [ ! -z "${INTERNAL_OPTIONS[$context$opt~value]}" ]; then
		if [ -z ${INTERNAL_OPTIONS[$context$opt~value~count]} ]; then
			INTERNAL_OPTIONS[$context$opt~value~0]="${INTERNAL_OPTIONS[$context$opt~value]}"
			INTERNAL_OPTIONS[$context$opt~value~count]=1
		fi
		INTERNAL_OPTIONS[$context$opt~value~${INTERNAL_OPTIONS[$context$opt~value~count]}]=$OPTION_DATA
		INTERNAL_OPTIONS[$context$opt~value~count]=$((${INTERNAL_OPTIONS[$context$opt~value~count]}+1))
	else
		INTERNAL_OPTIONS[$context$opt~value]="$OPTION_DATA"
	fi
	
	unset OPTION_DATA
}

function isOptionArray {
	if [ -z "${INTERNAL_OPTIONS[$conext$1~value~count]}" ]; then
		return 1
	fi
	return 0
}

#usage: getOption option_id option_index ignore_context
#		id 0 can be passed for singles + ignore context
function getOption {
	local conext=""
	if [ ! -z "$INTERNAL_OPTION_CONTEXT" ]; then
		context="$INTERNAL_OPTION_CONTEXT~"
	fi
	local index="$2"
	local out=""
	if [ ! -z "$index" ]; then

		if ! isInteger "$index"; then
			throwEx "nan"
		fi

		if [ $index -eq 0 ]; then
			out="${INTERNAL_OPTIONS[$context$1~value]}"
			if readbool "$3" && [ -z "$out" ]; then
				out="${INTERNAL_OPTIONS[$1~value]}"
			fi
		else
			out="${INTERNAL_OPTIONS[$context$1~value~$index]}"
			if readbool "$3" && [ -z "$out" ]; then
				out="${INTERNAL_OPTIONS[$1~value~$index]}"
			fi
		fi
		if [ -z "$out" ]; then
			if [ "${INTERNAL_OPTIONS[$id~parser]}" == "nonArgParameter" ]; then
				echo "no"
				return 0
			fi
		fi
		echo "$out"

	else
		if [ -z "${INTERNAL_OPTIONS[$conext$1~value]}" ]; then
			if [ "${INTERNAL_OPTIONS[$id~parser]}" == "nonArgParameter" ]; then
				echo "no"
				return 0
			fi
		fi
		echo "${INTERNAL_OPTIONS[$conext$1~value]}"
	fi

}

#recives function alias (E: --option-alias --oa -o)
function getOptionID {
	echo "${INTERNAL_OPTION_ALIAS[$1]}"
}

function inputOptionExists {
	if [ -z "${INTERNAL_OPTION_ALIAS[$1]}" ]; then
		return 1
	fi
	return 0
}

function isValidOption {
	local conext=""
	if [ ! -z "$INTERNAL_OPTION_CONTEXT" ]; then
		context="$INTERNAL_OPTION_CONTEXT~"
	fi
	if [ -z "${INTERNAL_OPTIONS[$context$1]}" ]; then
		return 1
	fi
	return 0
}

#ID DataType Description ALIASES
function registerInternalOption {
	local id="$1"
	local dataType="$2"
	local description="$3"

	[ -z "$description" ] && description="No description given"

	local conext=""
	if [ ! -z "$INTERNAL_OPTION_CONTEXT" ]; then
		context="$INTERNAL_OPTION_CONTEXT~"
	fi

	INTERNAL_OPTIONS[$context$id]="$description"
	if [ -z "${INTERNAL_OPTION_DATA_TYPES[$dataType]}" ]; then
		throwEx "qol_unknown_data_validator" "$dataType"
	fi

	INTERNAL_OPTIONS[$context$id~parser]=${INTERNAL_OPTION_DATA_TYPES[$dataType]}
	if [ "${INTERNAL_OPTIONS[$context$id~parser]}" == "nonArgParameter" ]; then
		declare -g -- OPTION_DATA="no"
		setOption "$id"
	fi

	local c=1
	while [ ! -z "$(echo $4 | cut -d',' -f$c)" ]; do
		INTERNAL_OPTION_ALIAS["$(echo $4 | cut -d',' -f$c)"]="$id"
		c=$(($c+1))
	done
}

function copyOptionToCurrentContext {
	local foreignContext="$1"
	local id="$2"
	local conext=""
	if [ ! -z "$INTERNAL_OPTION_CONTEXT" ]; then
		context="$INTERNAL_OPTION_CONTEXT~"
	fi
	INTERNAL_OPTIONS[$context$id~parser]="${INTERNAL_OPTIONS[$foreignContext$id~parser]}"
	INTERNAL_OPTIONS[$context$id]="${INTERNAL_OPTIONS[$foreignContext$id]}"
	INTERNAL_OPTIONS[$context$id~value]="${INTERNAL_OPTIONS[$foreignContext$id~value]}"
	INTERNAL_OPTIONS[$context$id~value~count]="${INTERNAL_OPTIONS[$foreignContext$id~value~count]}"
	for x in $(seq 1 $((${INTERNAL_OPTIONS[$foreignContext$id~value~count]}-1))); do
		INTERNAL_OPTIONS[$context$id~value~$x]="${INTERNAL_OPTIONS[$foreignContext$id~value~$x]}"
	done
}

############## echoing

function coecho {
	local formatting=""
	local message=""
	local tabulations=""

	if [ $# -ne 1 ]; then
		formatting="$1"
		shift
	fi
	while [ $# -gt 0 ]; do
		[ "$message" == "" ] && message="$1" || message="$message $1"
		shift
	done
	if [ ! -z "$COECHO_TABS" ]; then
		for x in $(seq 1 $COECHO_TABS); do
			tabulations="  "
		done
	fi
	echo -e $COECHO_ECHO_OPTS "$formatting$tabulations$message$FC_RESET"
}

function isException {
	for x in ${!QoL_ERRORS[@]}; do
		if [ "$x" == "$1" ]; then
			return 0
		fi
	done
	return 1
}

############## "Exception" throwing

#usage registerException exception_id exception_description
function registerException {
	if isException "$1"; then
		throwEx "qol_duplicate_ex" "$1"
	fi
	[ -z "${QoL_ERRORS[program_exceptions]}" ] && QoL_ERRORS[program_exceptions]=${QoL_ERRORS[upper_error_limit]}
	
	QoL_ERRORS[$1~]="$2"
	QoL_ERRORS[$1]=$((${QoL_ERRORS[program_exceptions]}))
	QoL_ERRORS[program_exceptions]=$((1+${QoL_ERRORS[program_exceptions]}))
}

#usage registerQoLException exception_id exception_description
function registerQoLException {
	if isException "$1"; then
		throwEx "qol_duplicate_ex" "$1"
	fi
	local requestedFrom="$(realpath -P $(caller | cut -d' ' -f2))"
	for x in ${BASH_QOL_FILES[@]}; do
		if [ "$x" == "$requestedFrom" ]; then
			[ -z "${QoL_ERRORS[QoL_exceptions]}" ] && QoL_ERRORS[QoL_exceptions]=1
			QoL_ERRORS[$1]=${QoL_ERRORS[QoL_exceptions]}
			QoL_ERRORS[QoL_exceptions]=$((${QoL_ERRORS[QoL_exceptions]}+1))
			QoL_ERRORS[$1~]="$2"
			return 0
		fi
	done
	throwEx "qol_tried_registering_internal_ex"
	return 1
}

function getExDes {
	if [ ! -z "${QoL_ERRORS[$1]}" ]; then
		echo ${QoL_ERRORS[$1~]}
	else
		coecho "$FC_YELLOW$FC_BOLD" "QoL WARNING:  Could not find Ex description: $FC_LIGHT_CYAN$1"
	fi
}

function getExCode {
	if [ ! -z "${QoL_ERRORS[$1]}" ]; then
		echo "${QoL_ERRORS[$1]}"
	else
		coecho "$FC_YELLOW$FC_BOLD" "WARNING: Could not find Ex code: $FC_LIGHT_CYAN$1"
	fi
}

function getExId {
	getArrayKeyByValue "QoL_ERRORS" "$1"
}

function printStackTrace {
	local stackCount=1
	coecho "$FC_BOLD$FC_CYAN" "Stack trace:"
	while [ ! -z "$(caller $stackCount)" ]; do
		coecho "$FC_BOLD$FC_LIGHT_CYAN" "	$(caller $stackCount)"
		stackCount=$(($stackCount+1))
	done
}

function throwEx {
	local requestedFrom="$(realpath -P $(caller | cut -d' ' -f2))"
	local calledFromMe="no"
	for x in ${BASH_QOL_FILES[@]}; do
		if [ "$x" == "$requestedFrom" ]; then
			calledFromMe="yes"
		fi
	done
	if [ ${QoL_ERRORS[$1]} -lt ${QoL_ERRORS[upper_error_limit]} ] && ! readbool "$calledFromMe"; then
		throwEx "qol_called_internal_ex"
		return 2
	fi
	local mess="$(getExDes $1)"
	mess="$(sed s/%subject%/$2/g <<< $mess)"
	coecho "$mess"
	printStackTrace
	exit ${QoL_ERRORS[$1]}
}

############## Self checking

function isDef {
	declare -p $1 > /dev/null 2> /dev/null
	return $?
}

function isQoL {
	if [ -z "${BASH_QOL_LIBRARIES[$1]}" ]; then
		echo -e "$FC_RED$FC_BOLD""B.QoL Error: Could not load library $1""$FC_RESET"
		return 200
	fi
}

function getMasterUniqueId {
    echo "$$.$(basename ${BASH_SOURCE[$((${#BASH_SOURCE[@]}-1))]})"
}

function getMyFileName {
	echo "$(basename ${BASH_SOURCE[$((${#BASH_SOURCE[@]}-1))]})"
}

function getMyself {
	echo ${BASH_SOURCE[$((${#BASH_SOURCE[@]}-1))]}
}

function getMyCommandName {
	echo $(basename ${BASH_SOURCE[$((${#BASH_SOURCE[@]}-1))]})
}

function reportMyself {
	echo "$$" > $(getTmpPath)/$(getMasterUniqueId).pid
}

function fullCleanup {
	rm -rf $(getTmpPath)/$(getMasterUniqueId).pid
}

function getHome {
	echo "$(getent passwd $(whoami) | cut -d':' -f6)"
}

function getStoragePath {
	echo "$(getHome)/.local/lib/$PROGRAM_PREFIX.$(getMyFileName)"
}

function getConfigPath {
	echo "$(getHome)/.config/$PROGRAM_PREFIX.$(getMyFileName)"
}

function getCachePath {
	echo "$(getHome)/.cache/$PROGRAM_PREFIX.$(getMyFileName)"
}

function getTmpPath {
	echo "/tmp/$PROGRAM_PREFIX.BashQoL"
}

############## STRING FUNCTIONS

function readbool {
	if [ -z "$1" ]; then
		return 2
	fi
	if [ "$1" != "0" ] && [ "$(toLower $1)" != "false" ] && [ "$(toLower $1)" != "no" ]; then
		return 0
	else
		return 1
	fi
}

function strStartsWith {
    if [ ! -z "$(grep -oE "^($2)" <<< $1)" ]; then
        return 0
    fi
    return 1
}

function toLower {
	echo "$1" | tr '[:upper:]' '[:lower:]'
}


function isYes {
	if [ "yes" == "$(toLower "$1")" ]; then
		return 0
	fi
	return 1
}

############## Numeric functions

function isInteger {

	if [ -z "$(echo "$1" | grep -oE "[^0-9-]")" ]; then
		if [ ! -z "$(echo "$1" | grep -oE "^(-){0,1}[0-9]+$")" ]; then
			return 0
		fi
	fi
	return 1
}


############## Misc Array handling

function getArrayKeyByValue {
	local origArray="$(declare -p $1)"
	local type="$(grep -oE "declare -(a|A)" <<< "$origArray" | grep -oE "(a|A)$")"
	data="$(sed -E "s/^declare\s+-(a|A){1}\s+[A-Za-z_0-9]+=//g" <<< "$origArray")"
	declare -$type array="$data"
	local needle="$2"

	for x in "${!array[@]}"; do
		if [ "${array[$x]}" == "$needle" ]; then
			echo "$x"
			return 0
		fi
	done
	return 1
}

function isArr {
	if [ ! -z "$(grep -oE "^declare\s+-(a|A)" <<< "$(declare -p $1 2> /dev/null)")" ]; then
		return 0
	else
		return 1
	fi
}

function isAssoc {
	if [ ! -z "$(grep -oE "^declare\s+-A" <<< "$(declare -p $1 2> /dev/null)")" ]; then
		return 0
	else
		return 1
	fi
}

function isInArray {
	if isArr $1; then
		local type="$(declare -p $1 | grep -oE "^declare -(A|a)")"
		eval "$type temporary$(declare -p $1 | sed -E "s/^declare -(A|a)\s+//g" | sed -E "s/^[^=]*//g")"
		for x in "${temporary[@]}"; do
			if [ "$2" == "$x" ]; then
				unset temporary
				return 0
			fi
		done
		unset temporary
	fi
    return 1
}

function dumpAssocArray {

	eval "$(declare -p $1 | sed -E "s/declare\s+-A\s+$1/declare -A ___ARR/g")"

	coecho "$FC_BOLD$FC_BLUE" "Dumping $1"
	declare -g -- COECHO_TABS="1"

	local cc=0
	local mccount=0
	for x in "${!___ARR[@]}"; do
		cc=$(($(wc -m <<< "$x")-1))
		if [ $cc -gt $mccount ]; then
			mccount=$cc
		fi
	done
	
	cc=0
	local colonDisplacement=0
	local displacement=""
	local message=""
	local separator=""
	for x in "${!___ARR[@]}"; do
		cc=$(($(wc -m <<< "$x")-1))
		colonDisplacement=$(($mccount-$cc))

		for y in $(seq 1 $colonDisplacement); do displacement="$displacement "; done
		message="$x""$FC_LIGHT_YELLOW""$displacement: ""$FC_LIGHT_CYAN${___ARR[$x]}"
		for y in $(seq 1 $(($(wc -m <<< "$message")-1))); do separator="$separator""_"; done
		coecho "$FC_BOLD$FC_BLACK" "$separator"
		coecho "$FC_BOLD$FC_GREEN" "$message"

		displacement=""
		separator=""
	done

	unset COECHO_TABS
	unset ___ARR
}

############## Variable persistence

function saveVar {
	[ "$1" != "" ] && declare -p $1 > /dev/null 2> /dev/null || return 1
    [ "$2" == "" ] && return 2
	local dir="$2"
    mkdir -p "$dir"
    [ ! -w "$2" ] && return 3
	if [ "$(toLower $3)" != "no" ] && [ "$3" != "0" ] && [ "$(toLower $3)" != "false" ]; then
    	declare -p $1 | sed -E "s/^declare -/declare -g -/g" > "$dir/$1.bvar" 2> /dev/null
	else
		declare -p $1 > "$dir/$1.bvar" 2> /dev/null
	fi
    chmod 700 "$dir/$1.bvar"
}

function loadVar {
    unset "$1"
    local dir="$2"
    if ! source "$dir/$1.bvar" 2> /dev/null; then
        return 1
    else
        declare -p $1 | sed -E "s/^declare -/declare -g -/g"
        return 0
    fi
}

################ Date handling


function timeYMD {
	date "+%Y-%m-%d"
}

function timestamp {
	date "+%s"
}

function unixToFormat {
	date "$1" -d @$2
}

function unixToYMD {
	unixToFormat "+%Y-%m-%d" "$1"
}

function logTimeFormat {
	echo -n "[$(date "+%H:%m:%S")]:"
}

################# Context handleing

function isSystemd {
	if [ ! -z "$INVOCATION_ID" ]; then
		# echo "$INVOCATION_ID"
		return 0
	fi
	return 1
}


 registerQoLCommonExceptions
 registerCommonExceptions