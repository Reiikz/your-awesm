#!/bin/bash

VERSION="$1"
BASH_QOL_VERSION="$2"

MAIN_LIBRARY_DEBIAN_DEPS="rz-bash-qol"
CLIENT_DEBIAN_DEPS="findutils, wget, steamcmd, sudo, your-awesm-common, rz-bash-qol"
SERVER_DEBIAN_DEPS="findutils, wget, steamcmd, sudo, your-awesm-common, rz-bash-qol"
BASH_QOL_DEBIAN_DEPS="screen"


MAIN_LIBRARY_DESCRIPTION="Common functions for starc and stars (starbound mod manager main library)"
SERVER_DESCRIPTION="Allows you to manage multiple starbound servers with multiple modpacks"
CLIENT_DESCRIPTION="Allows you to manage multiple starbound clients with multiple modpacks"
BASH_QOL_DESCRIPTION="Bash scripts providing quality of life functions and miscelanious utilities"


COMMAND_SERVER="star-server"
COMMAND_SERVER_ALIAS="stars"
COMMAND_CLIENT="star-client"
COMMAND_CLIENT_ALIAS="starc"


PACKAGE_NAME="your-awesm"
MAIN_LIBRARY_NAME="common"
CLIENT_PACKAGE_NAME="client"
SERVER_PACKAGE_NAME="server"
ARCH="all"

declare -g BUILDING=""

GIT_BRANCH="$(git branch -a | grep \* | sed "s/*//g" | sed -E "s/^\s+//g")"
COMMIT_HASH="$(git rev-parse --verify HEAD)"
COMMIT_HASH="${COMMIT_HASH:0:7}"

if [ ! -f ./user ] && [ ! -z "$SUDO_COMMAND" ] && [ "root" == "$(whoami)" ]; then
    echo "run me as your local user first please X3"
    exit 0
fi

if [ ! -f ./user ]; then
    echo "$(whoami)" > user
    echo "all done"
    exit 0
fi

if [ -z "$SUDO_COMMAND" ] && [ "$(whoami)" != "root" ]; then
    echo "giv root plz" 
    exit 0
fi

if [ -z "$VERSION" ]; then
    echo "first argument must be package version"
    exit 1
fi

if [ -z "$BASH_QOL_VERSION" ]; then
    echo "Next argument must be Bash Quality of Life Version"
    exit 1
fi

USERNAME="$(cat user)"

rm -rf your-awesm-*-all
rm -rf your-awesm-*-all.deb
rm -f *.deb

#configurePackage version dependancies description package_name
function configurePackage {

    mkdir -p "$BUILDING-$VERSION-$ARCH/DEBIAN"
    cat templates/control | sed "s/%version%/$1/g" | sed "s/%deps%/$2/g" | sed "s/%description%/$3/g" | sed "s/%packagename%/$4/g" > $BUILDING-$VERSION-$ARCH/DEBIAN/control
    
    return 0
}


# writeToExectuableFile sourcefile final_desitnation alias
function writeToExectuableFile {

    echo "file: $1"
    echo "  dest: $2"

    #get file contents
    local file="$(cat "$1")"


    #parse path
    local dest="$BUILDING-$VERSION-$ARCH/${2:1:$(bc <<< "scale=1; ${#2}-1" | grep -oE "^[0-9]+" )}"
    echo "  package dest: $dest"
    mkdir -p "$(dirname $dest)"


    file="$(echo "$file" | sed -E "s/VERSION=\".*$/VERSION=\"$VERSION\"/g" | sed "s/BUILT_FROM=\".*$/BUILT_FROM=\"$GIT_BRANCH-$COMMIT_HASH\"/g")"
    echo "$file" > "$dest"
    chmod 755 "$dest"
    local prev="$(pwd)"
    cd "$(dirname $dest)"
    [ ! -z "$3" ] && ln -s "./$(basename $dest)" "$3"
    cd "$prev"
}

function cleanup {
    sudo chown $USERNAME:$USERNAME ./* -R
}

# putManual source destination version command_name
function putManual {
    echo "manual: $1"
    echo "  dest: $2"
    local dest="$BUILDING-$VERSION-$ARCH/${2:1:$(bc <<< "scale=1; ${#2}-1" | grep -oE "^[0-9]+" )}"
    echo "  package dest: $dest"
    mkdir -p "$(dirname "$dest")"
    local file="$(sed "s/%version%/$3/g" "$1" | sed "s/%insertdatehere%/$(date "+%d\/%m\/%Y")/g" | sed "s/%commandname%/$4/g")"
    echo "$file" > "$dest"
    gzip "$dest"
    return 0
}

# aliasFile target alias
function aliasFile {
    local target="$BUILDING-$VERSION-$ARCH/${1:1:$(bc <<< "scale=1; ${#1}-1" | grep -oE "^[0-9]+" )}"
    local prev="$(pwd)"
    cd "$(dirname $target)"
    ln -s "./$(basename $target)" "$2"
    cd "$prev"
}

# putTemplate source destination
function putTemplate {
    echo "template: $1"
    echo "  dest: $2"
    local dest="$BUILDING-$VERSION-$ARCH/${2:1:$(bc <<< "scale=1; ${#2}-1" | grep -oE "^[0-9]+" )}"
    echo "  package dest: $dest"
    mkdir -p "$(dirname "$dest")"
    local file="$(cat "$1")"
    echo "$file" > "$dest"
    return 0
}



BUILDING="$PACKAGE_NAME-"$SERVER_PACKAGE_NAME
rm -rf "$BUILDING-$VERSION-$ARCH"
configurePackage "$VERSION" "$SERVER_DEBIAN_DEPS" "$SERVER_DESCRIPTION" "$BUILDING"
writeToExectuableFile "star-server" "/usr/local/bin/$COMMAND_SERVER" "$COMMAND_SERVER_ALIAS"
putManual "manual.5" "/usr/share/man/man5/$COMMAND_SERVER.5"
aliasFile "/usr/share/man/man5/$COMMAND_SERVER.5.gz" "$COMMAND_SERVER_ALIAS.5.gz"
putTemplate "templates/template-unit-file.service" "/usr/local/lib/reiikz/your-awesm/templates/template-unit-file.service"
dpkg-deb -b "$BUILDING-$VERSION-$ARCH"
cleanup

BUILDING="$PACKAGE_NAME-"$CLIENT_PACKAGE_NAME
rm -rf "$BUILDING-$VERSION-$ARCH"
configurePackage "$VERSION" "$CLIENT_DEBIAN_DEPS" "$CLIENT_DESCRIPTION" "$BUILDING"
writeToExectuableFile "star-client" "/usr/local/bin/star-client" "$COMMAND_CLIENT_ALIAS"
dpkg-deb -b "$BUILDING-$VERSION-$ARCH"
cleanup

BUILDING="$PACKAGE_NAME-"$MAIN_LIBRARY_NAME
rm -rf "$BUILDING-$VERSION-$ARCH"
configurePackage "$VERSION" "$MAIN_LIBRARY_DEBIAN_DEPS" "$MAIN_LIBRARY_DESCRIPTION" "$BUILDING"
writeToExectuableFile "common" "/usr/local/lib/reiikz/your-awesm/common"
dpkg-deb -b "$BUILDING-$VERSION-$ARCH"
cleanup

BUILDING="rz-bash-qol"
VERSION="$BASH_QOL_VERSION"
rm -rf "$BUILDING-$VERSION-$ARCH"
configurePackage "$VERSION" "$BASH_QOL_DEBIAN_DEPS" "$BASH_QOL_DESCRIPTION" "$BUILDING"
writeToExectuableFile "BashQoL/common" "/usr/local/lib/reiikz/bash-qol/common"
dpkg-deb -b "$BUILDING-$VERSION-$ARCH"
cleanup



