#!/bin/bash

#
# MIT License
#
# Copyright (c) 2022 Reiikz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

#######################################################################
######			---------------------------------------------         #
######							ATENTION                              #
######			---------------------------------------------         #
######		THIS IS JUST A LIBRARY CONTAINGING FUNCTIONS AND SHOULD   #
######      NOT BE RAN MANUALLY 									  #
######																  #
#######################################################################

# SOURCE_URL="https://github.com/Reiikz/your-awesm"
# ERROR_REPORTING_TO="https://github.com/Reiikz/your-awesm/issues"

#STARBOUND APP ID, this is the Game's APP ID and it is used to download mods, do not change it
STARBOUND_APPID=211820

PROGRAM_PREFIX="RZ"
PROGRAM_NAME="Your-AweSM"

# Register Common star-server exceptions

# registerException "your_awesm_undefined_profiler" "Expected PROFILER_DEFAULTS to be Assoc Array but it was not or not defined"
function registerYourAweSMCommonExceptions {
	local s="$FC_BOLD$FC_LIGHT_RED""QoL Error: $FC_RED"
	registerException "expected_profile" "$s""Expected profile but no profile was given"
	registerException "wrong_profile" "$s""Profile $FC_LIGHT_CYAN%subject%$FC_LIGHT_RED does not exist"
	registerException "loadvar_fail" "$s""Could not load $FC_LIGHT_CYAN%subject%"
	registerException "could_not_load_available_profiles" "$s""Could not load available profiles :("
}
registerYourAweSMCommonExceptions

# Load up profiler defaults, if not present we should crash
# if ! isAssoc PROFILER_DEFAULTS; then
# 	throwEx "your_awesm_undefined_profiler"
# else
# 	PROFILER_DEFAULTS[test]="xd"
# fi


####### We load currently available profiles
if ! loadVar AVAILABLE_PROFILES $(getConfigPath); then
	declare -gA AVAILABLE_PROFILES
fi

registerInternalOption "Profile" "subcommand" "Profiling functionality sub-command" "profile,"
registerInternalOption "Purge" "subcommand" "Delete all data created by $PROGRAM_NAME" "purge,"
registerInternalOption "profile_name" "string" "Name of the profile that's getting worked on" "--profile,-P"
registerInternalOption "force" "none" "Take the course of action that provokes change without confirmation" "-f,--force"

function printCopyright {
	coecho "$FC_BOLD$FC_LIGHT_GREEN" "YOUR AWEsome Starbound Manager - $FC_LIGHT_CYAN""your-awesm$FC_LIGHT_GREEN Â© $FC_LIGHT_PINK""Reiikz$FC_LIGHT_GREEN - $COPYRIGHT_YEAR"
	coecho "$FC_BOLD" "$FC_LIGHT_CYAN$MYSELF$FC_LIGHT_GREEN command - v $FC_LIGHT_CYAN$VERSION$FC_LIGHT_GREEN - MIT LICENSED"
	coecho "$FC_BOLD$FC_LIGHT_GREEN" "Official source: $FC_BLUE$SOURCE_URL"
	coecho "$FC_BOLD$FC_LIGHT_GREEN" "Report bugs to: $FC_BLUE$ERROR_REPORTING_TO"
	coecho "$FC_BOLD$FC_LIGHT_GREEN" "For documentation refer to: $FC_BLUE$DOCUMENTATION"
}

function Purge {
	evalParams $@
	local force=$(getOption "force" 0 "yes")
	coecho "$FC_BOLD$FC_LIGHT_YELLOW" "THIS WILL SMITE EVERY CONFIGURATION AND SAVE FILES YOU'VE CREATED USING THE PROGRAM"
	declare -g -- COECHO_ECHO_OPTS="-n"
	! readbool "$force" && coecho "$FC_BOLD$FC_LIGHT_GREEN" "write: [yes I do] if you want to delete $FC_RED""EVERYTHING$FC_LIGHT_GREEN (not case sensitive): "
	unset COECHO_ECHO_OPTS
	! readbool "$force" && read -r res
	if [ "yes i do" == "$(toLower "$res")" ] || readbool "$force"; then
		coecho "$FC_BOLD$FC_LIGHT_GREEN" "Deleting everything"
		rm -rf "$(getStoragePath)" "$(getConfigPath)" "$(getCachePath)" "$(getTmpPath)"
	else
		coecho "$FC_BOLD$FC_GREEN" "No action taken."
	fi
}

function Profile {
	INTERNAL_COMMAND_RAN=no

	INTERNAL_OPTION_CONTEXT="Profile"
	copyOptionToCurrentContext "" "profile_name"
	copyOptionToCurrentContext "" "force"
	registerInternalOption "CreateProfile" "subcommand" "Create a profile" "create,"
	registerInternalOption "DeleteProfile" "subcommand" "Delete currently selected profile"  "delete,"

	evalParams $@

	if ! readbool "$INTERNAL_COMMAND_RAN"; then
		coecho "$FC_BOLD$FC_LIGHT_GREEN" "profile expected a command"
		printAvailableServers
	fi
}

function isThereProfiles {
	if [ "${#AVAILABLE_PROFILES[@]}" == "0" ]; then
		return 1
	fi
	return 0
}

function loadAvailableProfiles {
	loadVar AVAILABLE_PROFILES "$(getConfigPath)"
	return $?
}

function saveAvaliableProfiles {
	saveVar AVAILABLE_PROFILES "$(getConfigPath)"
}

function loadProfile {
	echo lol implement me
}

function saveProfile {
	saveVar PROFILE "${PROFILE[CONFIG_PATH]}"
}

function isProfile {
	if [ ! -z "${AVAILABLE_PROFILES[$1]}" ]; then
		return 0
	fi
	return 1
}

function setProfiledDir {
	local name="$1"
	local path="$2"
	PROFILE[$name]="$path"

	mkdir -p "$path"

	if [ -z "${PROFILE[DIRLIST~count]}" ]; then
		PROFILE[DIRLIST~count]=0
	fi

	PROFILE[DIRLIST~${PROFILE[DIRLIST~count]}]="$path"
	PROFILE[DIRLIST~count]=$((${PROFILE[DIRLIST~count]}+1))
}

function deleteProfileDirs {
	for x in $(seq 0 $((${PROFILE[DIRLIST~count]}-1))); do
		rm -rf ${PROFILE[DIRLIST~$x]}
	done
}

function loadDefaultProfile {

	local name=""
	if [ ! -z "$1" ]; then
		name="$1"
	else
		name="$(getOption profile_name 0 yes)"
		if [ -z "$name" ]; then
			name="main"
		fi
	fi

	declare -gA PROFILE
	PROFILE[NAME]="$name"
	setProfiledDir "PATH" "$(getStoragePath)/$name"
	setProfiledDir "CONFIG_PATH" "$(getStoragePath)/$name/config"
	setProfiledDir "CACHE" "$(getCachePath)/$name"
	setProfiledDir "MOD_CACHE" "$(getCachePath)/$name/MOD_CACHE"
}

function printAvailableServers {
	if isThereProfiles; then
		coecho "$FC_BOLD$FC_BLUE" "Currently available profiles:"
		COECHO_TABS=1
		for x in "${!AVAILABLE_PROFILES[@]}"; do
			coecho "$FC_GREEN" "$x"
		done
	else
		coecho "$FC_BOLD$FC_BLUE" "There is no configured profiles"
	fi
}

function DeleteProfile {
	evalParams $@
	local force=$(getOption "force" 0 "yes")
	local profile=$(getOption "profile_name" 0 yes)

	if [ -z "$profile" ]; then
		throwEx "expected_profile"
	fi
	
	if ! isProfile "$profile"; then
		throwEx "wrong_profile" "$profile"
	fi

	coecho "$FC_BOLD$FC_LIGHT_YELLOW" "THIS WILL SMITE YOUR ENTIRE SERVER PROFILE"
	declare -g -- COECHO_ECHO_OPTS="-n"
	! readbool "$force" && coecho "$FC_BOLD$FC_LIGHT_GREEN" "write: [yes I do] if you want to delete the profile (not case sensitive): "
	unset COECHO_ECHO_OPTS
	! readbool "$force" && read -r res
	if [ "yes i do" == "$(toLower "$res")" ] || readbool "$force"; then
		coecho "$FC_BOLD$FC_LIGHT_GREEN" "Deleting profile $FC_LIGHT_CYAN$profile"
		if ! loadVar PROFILE ${AVAILABLE_PROFILES[$profile]}; then
			throwEx "loadvar_fail" "${AVAILABLE_PROFILES[$profile]}"
		fi
		local dir=""
		for x in $(seq 0 $((${PROFILE[DIRLIST~count]}-1))); do
			dir="${PROFILE[DIRLIST~$x]}"
			COECHO_TABS=1
			[ -e "$dir" ] && if rm -r "$dir"; then
				coecho "$FC_GREEN$FC_BOLD" "Deleted: $dir"
			fi
			unset COECHO_TABS
			unset AVAILABLE_PROFILES[$profile]
			saveAvaliableProfiles
		done
	else
		coecho "$FC_BOLD$FC_GREEN" "No action taken."
	fi
}

function CreateProfile {

	evalParams $@

	loadDefaultProfile
	
	# dumpAssocArray PROFILE
	
	AVAILABLE_PROFILES[${PROFILE[NAME]}]="${PROFILE[CONFIG_PATH]}"
	# dumpAssocArray AVAILABLE_RPOFILES

	saveAvaliableProfiles
	saveProfile

	findSteam
	findSteamLibraries

}

function findAndVerifyStarboundDir {

	while read -r line; do
	
		if [ -f "$line/assets/packed.pak" ]; then
			declare -g -- STARBOUND_DIR="$line"
			return 0
		fi
	
	done <<< $(findSteamAppDirectory "Starbound")

	return 1
}







function getModName {
	local id="$1"
	if [ -f "$CACHE_DIR/modnames/$id.name" ]; then
		local c=0
		while [ -z "$(cat $CACHE_DIR/modnames/$id.name)" ]; do
			mkdir -p $CACHE_DIR/modnames
			echo "$(wget "https://steamcommunity.com/sharedfiles/filedetails/?id=$id" -O - 2> /dev/null | grep -oP "(?<=<div class\=(\"|\')workshopItemTitle(\"|\')>)(.*)(?=<\/div>)")" > $CACHE_DIR/modnames/$id.name
			c=$(($c+1))
			if [ $c -gt 5 ]; then
				break
			fi
		done
		echo "$(cat $CACHE_DIR/modnames/$id.name)"
	else
		mkdir -p $CACHE_DIR/modnames
		local name="$(wget "https://steamcommunity.com/sharedfiles/filedetails/?id=$id" -O - 2> /dev/null | grep -oP "(?<=<div class\=(\"|\')workshopItemTitle(\"|\')>)(.*)(?=<\/div>)")"
		echo "$name" > $CACHE_DIR/modnames/$id.name
		echo "$name"
	fi

}

function parseModpack {
	if [ -z "$(grep -oE "^(http|https)://steamcommunity.com/sharedfiles/filedetails/\?id=[0-9]+" <<< $1)" ]; then
		coecho "$FC_LIGHT_RED$FC_BOLD" "$1: is not a valid workshop link"
		exit 1
	fi
	rm -f /tmp/$MY_UID.workshop.html
	wget $1 -O /tmp/$MY_UID.workshop.html 2> /dev/null
	PARSED_MODPACK[RAW]="$(cat /tmp/$MY_UID.workshop.html)"
	PARSED_MODPACK[NAME]="$(echo "${PARSED_MODPACK[RAW]}" | grep -oE "<div\s+class=\"workshopItemTitle\">.+</div>" | head -n 1 | sed -E "s/(<div\s+class=\"workshopItemTitle\">|<\/div>)//g")"
	local items="$(echo "${PARSED_MODPACK[RAW]}" | tr -d \\n | grep -oE "<div\s+class=(\"|\')collectionItemDetails(\"|\')>\s*<a\s*href=(\"|\')http(s)*\:\/\/steamcommunity\.com\/sharedfiles\/filedetails\/\?id=[0-9]+(\"|\')\s*>")"
	[ "$items" == "" ] && return 1
	local c=0
	while read -r line; do
		local link="$(grep -oE "http(s)*\:\/\/steamcommunity\.com\/sharedfiles\/filedetails\/\?id=[0-9]+" <<< $line)"
		[ "$link" == "" ] && continue
		local id="$(grep -oE "id=[0-9]+" <<< $link | grep -oE "[0-9]+")"
		PARSED_MODPACK["$id"~link]="$link"
		PARSED_MODPACK[$c~id]="$id"
		PARSED_MODPACK[$c~link]="$link"

		if [ -f $CACHE_DIR/modnames/$id.name ]; then
			PARSED_MODPACK[$c~name]="$(cat $CACHE_DIR/modnames/$id.name)"
			PARSED_MODPACK[$id~name]="$(cat $CACHE_DIR/modnames/$id.name)"
		else
			mkdir -p $CACHE_DIR/modnames
			local name="$(wget "$link" -O - 2> /dev/null | grep -oP "(?<=<div class\=(\"|\')workshopItemTitle(\"|\')>)(.*)(?=<\/div>)")"
			echo "$name" > $CACHE_DIR/modnames/$id.name
			PARSED_MODPACK[$c~name]="$name"
			PARSED_MODPACK[$id~name]="$name"
		fi
		c=$(($c+1))
		coecho "$FC_CYAN" "Found Content: ${PARSED_MODPACK[$id~name]} ($id)"

	done <<< $items
	if [ $c -eq 0 ]; then
		PARSED_MODPACK[~modCount]="$c"
		return 2
	fi
	PARSED_MODPACK[~lastItem]="$(($c-1))"
	PARSED_MODPACK[~modCount]="$c"
	coecho "$FC_LIGHT_GREEN$FC_BOLD" "Parsed modpack '${PARSED_MODPACK[NAME]}', $c workshop items found"
	cleanup
	return 0
}


